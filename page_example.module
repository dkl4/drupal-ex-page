<?php

/**
 * @file
 * Module file for page_example module.
 */

/**
 * @deffroup page_example Example : Page
 * @ingroup examples
 * @{
 * This example demonstrates how a module can display a page at a given URL.
 *
 * It's important to understand how the menu system works in order to
 * implement your own pages. See the Menu Example for some insight.
 *
 * @see menu_example.module
 */

/**
 * Implements hook_help().
 *
 * Through hook_help(), a module can make documentation available to the user
 * for the module as a whole or for specific paths. Where the help appears
 * depends on the $path specified.
 *
 * In the first example below, the help text will appear on the simple page
 * defined in hook_menu below in the region designated for help text.
 *
 * In the second example, the text will be available through the module page as
 * a link beside the module or on the admin help page (admin/help) in the list
 * of help topics using the name of the module. To specify help in the admin
 * section use the module name in the path as in the second case below.
 *
 * @see hook_help()
 */
function page_example_help($path, $arg) {
  switch ($path) {
    case 'examples/page_example/simple':
      // Help text for the above path
      // Note in the "default case" (Garland) the help text is returned in a box
      //   above the other page output
      return t('This is help text for the simple page');
    case 'admin/help#page_example':
      // This is also viewable from a 'Help' link on the Module page
      return t('This is help text created in the page example\'s second case.');

  }
}

/**
 * Implements hook_permission().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function page_example_permission() {
  return array(
    'access simple page' => array(
      'title'       => t('Access simple page'),
      'description' => t('Allow users to access simple page'),
    ),
    'access arguments page' => array(
      'title'       => t('Access page with arguments'),
      'description' => t('Allow users to access page with arguments'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Because hook_menu() registers URL paths for items defined by the function, it
 * is necessary for modules that create pages. Each item can als specify a
 * callback function for a given URL. The menu items returned here provide this
 * information to the menu system.
 *
 * We will define some menus, and their paths will be interpreted as follows :
 *
 * If the user access http://example.com/?q=examples/page_example/simple,
 * the menu system will first look for a menu item with that path. In this case
 * it will find a match, and execute page_example_simple().
 *
 * If the user accesses http://?q=examples/page_example/arguments/1/2, the menu
 * system will first look for examples/page_examples/arguments/1/2. Not finding
 * a match, it will look for examples/page_example/arguments/1/%.  Again, not
 * finding a match, it will look for examples/page_example/arguments/%/2.
 * Yet again not finding a match, it will look for
 * examples/page_example/arguments/%/%. This time it finds a match, and so will
 * execute page_example_arguments(1, 2). Since the parameters are passed to
 * the function after the match, the function can do additional checking or
 * make use of them before executing the callback function.
 *
 * Menu Routing Priority
 *   examples/page_example/arguments/1/2  => not finding fails to
 *   examples/page_example/arguments/1/%  => not finding fails to
 *   examples/page_example/arguments/%/2  => not finding fails to
 *   examples/page_example/arguments/%/%  => calls page_example_arguments(1, 2)
 *
 * @see hook_menu()
 * @see menu_example.module
 */
function page_example_menu() {
  // This is the minimum information you can provide for a menu item. This menu
  // item will be created in the default menu, usually Navigation
  $items['examples/page_example'] = array(
    'title'           => 'Page Example',
    'page callback'   => 'page_example_description',
    'access callback' => TRUE,
    'expanded'        => TRUE,           // Expands the visible menu tree?
  );

  $items['examples/page_example/simple'] = array(
    'title'            => 'Simple - no arguments',
    'page callback'    => 'page_example_simple',
    'access arguments' => array('access simple page'),
  );

  // By using the MENU_CALLBACK type, we can register the callback for this
  // path without the item appearing in the mneu; the admin cannot enable the
  // item in the menu, either.
  //
  // Notice that 'page arguments' is an array of numbers. These will be
  // replaced with the corresponding parts of the menu path. In this case a 0
  // would be replaced by 'example', a 1 by 'page_example', and a 2 by
  // 'arguments'.  3 and 4 will be replaced by whatever the user provides.
  // These will be passed as arguments to the page_example_arguments() function.
  //
  // The numbers are the positional numbers in the URL slash-path
  //       0          1          2       3    4
  //   examples/page_example/arguments/arg3/arg4

  $items['examples/page_example/arguments/%/$'] = array(
    'page callback'    => 'page_example_arguments',
    'page arguments'   => array(3, 4),
    'access arguments' => array('access arguments page'),
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Constructs a descriptive page.
 *
 * Our menu maps this function to the path 'examples/page_example'.
 *
 */
function page_example_description() {
  return array('#markup' => t(
    'The page_example provides two pages, "simple" and "arguments". The <a href="@simple_link">simple page</a> just returns a renderable array for display. The <a href="@arguments_link">arguments page</a> takes two arguments and displays them, as in @arguments_link',
      array(
        '@simple_link'    => url('examples/page_example/simple', array('absolute' => TRUE)),
        '@arguments_link' => url('examples/page_example/arguments/23/56', array('absolute' => TRUE)),
        )
      )
  );
}

/**
 * Constructs a simple page.
 *
 * The simple page callback, mapped to the path 'examples/page_example/simple'.
 *
 * Page callbacks return a renderable array with the content area of the page.
 * The theme system will later render and surround the content in the
 * appropriate blocks, navigation, and styling.
 *
 * If you do not want to use the theme system (for example for outputting an
 * image or XML), you should print the content yourself and not return anything.
 *
 * If you do a simple print('Hi Mom!); the returned page is ONLY that print output
 * with NO other markup of any kind.
 */
function page_example_simple() {
  return array('#markup' => '<p>' . t('Simple page: The quick brown fox jumps over the lazy dog.') . '</p>');
  //print('Hi Mom!');
}
